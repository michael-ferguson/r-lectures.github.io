#    -*- mode: org -*-
#+TITLE: R 2019
#+DATE: 20/03/2019
#+AUTHOR: Luis G. Moyano
#+EMAIL: lgmoyano@gmail.com

#+OPTIONS: author:nil date:t email:nil
#+STARTUP: showall expand
#+options: toc:nil
#+REVEAL_ROOT: ../../reveal.js/
#+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h3>%d</h3>"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_THEME: simple
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programación en R 2017">
#+REVEAL_POSTAMBLE: <p> @luisgmoyano </p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+REVEAL_HLEVEL: 4

# (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# (setq org-reveal-title-slide 'auto)
# see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

# #+OPTIONS: reveal_width:1200 reveal_height:800
# #+OPTIONS: toc:1
# #+REVEAL_PLUGINS: (markdown notes)
# #+REVEAL_EXTRA_CSS: ./local
# ## black, blood, league, moon, night, serif, simple, sky, solarized, source, template, white

#+begin_src yaml :exports (when (eq org-export-current-backend 'md) "results") :exports (when (eq org-export-current-backend 'reveal) "none") :results value html 
--- 
layout: default 
title: Clase 2
--- 
#+end_src 
#+results:

# #+begin_html
# <img src="right-fail.png">
# #+end_html

# #+ATTR_REVEAL: :frag roll-in


* Repaso de la clase pasada
** Conceptos principales
- Abrimos una sesión de R en una consola
- R usa comandos para ejecutar acciones
- Los comandos se distinguen por sus () finales
- Se escriben en la línea de comandos (que empieza con el /prompt/) y se ejecutan con /Enter/
** Conceptos principales
*Paquetes* contienen *funciones* (aka, comandos)
#+BEGIN_SRC R 
  install.packages("ggplot2") # instalo el paquete de Internet, si no lo tengo aún
  library(ggplot2) # cargo el paquete ggplot2 en mi sesión
#+END_SRC
*Funciones* actuan sobre *datos y variables*
#+BEGIN_SRC R 
  str(iris) # str() me describe la estructura de mis_datos
  summary(iris) # summary() los resume estadísticamente
  head(iris) # head() me muestra algunas primeras líneas
  plot(iris$Sepal.Length, iris$Sepal.Width) # plot() los grafica
#+END_SRC
** Visualización I
~base::plot()~
#+BEGIN_SRC R 
# Defino un vector de 5 valores
cars <- c(1, 3, 6, 4, 9)

# Grafico los 5 valores en función de su posición en el vector
plot(cars)

# Idem, pero agrego una línea y lo coloreo de azul
plot(cars, type="o", col="blue")

# Agrego un título en rojo con cierto tamaño de letra
title(main="Autos", col.main="red", font.main=4)
#+END_SRC

** Visualización II
~base::plot()~
#+BEGIN_SRC R 
# Genero 1000 valores aleatorios de una distribución lognormal (?rlnorm)
r <- rlnorm(1000)

# Guardo en h un histograma sin dibujarlo, y con bins menores (?seq y ?hist)
h <- hist(r, plot=F, breaks=c(seq(0,max(r)+1, .1)))

# Dibujo el histograma con ejes logarítmicos y con puntos azules
plot(h$counts, log="xy", pch=20, col="blue",
	main="Log-normal distribution",
	xlab="Value", ylab="Frequency")
#+END_SRC
* Sobre las prácticas

* ~ggplot2~
** ~qplot~
~ggplot2::qplot()~ 

#+BEGIN_SRC R 
## "scatterplot" de displ vs. hwy del data.frame mpg
install.packages("ggplot2") 
library(ggplot2)
qplot(displ, hwy, data = mpg)

## idem pero usando una escala de colores para "class"
qplot(displ, hwy, colour = class, data = mpg)
#+END_SRC

1. similar a plot()
2. para hacer figuras básicas está ok
3. para gráficas más elaboradas vamos a usar ggplot2()

** 
~ggplot2~
#+BEGIN_SRC R 
  p <- ggplot(mtcars)   # creo un objeto ggplot con los datos mtcars
  p <- ggplot(mtcars) + aes(mpg, wt) # le agrego el mapeo de variables que quiero
  p <- ggplot(mtcars) + aes(mpg, wt) + geom_point() # le agrego como quiero que represente ese mapeo
  p                     # imprimo la figura
#+END_SRC
- /grammar of graphics/ [[http://vita.had.co.nz/papers/layered-grammar.pdf][(Wilkinson, 2005)]]
- se trata de construir capas de código, cada una agregando un concepto a la figura final
- cada capa controla un aspecto independiente de la figura
- la figura /es/ el código (se puede guardar, extender, reproducir, etc.)

** En general:

  #+BEGIN_SRC R 
  ggplot(data = {DATA}) + 
        {GEOM_FUNCTION}(mapping = aes( {MAPPINGS} ))
  #+END_SRC

¡Cuidado! ~ggplot2~ trabaja _solo_ con ~data.frames~, al igual que el resto del tidyverse (dplyr, tidyr, etc.).

Más en ggplot2-cheatsheet-2.1.pdf (ver Google Classroom/Classwork/Class Drive Folder/R cheatseets).
** ¿Y qué vendría siendo un data.frame?
- un data.frame es una de las estructuras más comunes para manejar datos en R
- es una lista de vectores de igual dimensión
  #+BEGIN_SRC R 
    df <- data.frame() # creo un data.frame llamado df
    is.data.frame(df)  # ¿es un data.frame?
    [1] TRUE
    is.list(df)        # ¿es una lista?
    [1] TRUE
  #+END_SRC
- tiene propiedades de data.frames y de listas
- ¡A practicar! Busquen un data.frame con data() y prueben las funciones ~length()~ y ~nrow()~
** Aesthetics y Geoms
#+BEGIN_SRC R 
data(economics)
?economics
str(economics)
ggplot(economics, aes(x = pce)) + geom_histogram()
ggplot(economics, aes(x = date, y = unemploy)) + geom_line()
ggplot(economics, aes(x = date, y = unemploy, colour = pce)) + geom_line() # colour, size, shape, etc.
#+END_SRC
- aesthetics, ~aes()~, controla mapeos entre variables y elementos visuales
- ejemplo: variable A <-> coordenada x, o variable C <-> forma del punto
- existen muchos [[https://ggplot2.tidyverse.org/reference/#section-layer-geoms][tipos de ~geoms~]]

** /Facets/ y /scales/
#+BEGIN_SRC R 
library(ggplot2)
ggplot(midwest, aes(x = popwhite, y = percadultpoverty, colour = inmetro)) + 
        geom_line() + 
        facet_wrap(~ state) + 
        scale_x_log10()
#+END_SRC
- /Facets/ se usan para dividir la figura en varias, filtrando mediante alguna variable categórica
- /scales/ permiten modificar el tipo de ejes de la figura

** Glosario ~ggplot2~

- *~data~*: el /dataframe/ que contiene los datos a graficar
- *~geoms~*: el tipo de objeto geométrico que representa los datos: puntos, líneas, polígonos, etc.
- *~aesthetics~*: describe las características visuales que representan los datos,  por ejemplo, posición, tamaño, color, forma, etc 
- *~scale~*: para cada /aesthetic/, describe como se mapea la característica visual a valores
 por ejemplo, escala logarítmica, escala de color, de tamaño, de forma, etc.
- *~stats~*: describe transformaciones estadísticas que resumen los datos, e.g. una regresión  

* Práctica
Descargar [[https://r-lectures.github.io/assets/R2019-practice-2.pdf][práctica 2]].

