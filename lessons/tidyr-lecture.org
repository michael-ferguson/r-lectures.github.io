#    -*- mode: org -*-
#+TITLE: R lectures
#+DATE: 06/06/2017
#+AUTHOR: Luis G. Moyano
#+EMAIL: lgmoyano@gmail.com

#+OPTIONS: author:nil date:t email:nil
#+OPTIONS: ^:nil _:nil
#+STARTUP: showall expand
#+options: toc:nil
#+REVEAL_ROOT: ../../reveal.js/
#+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h3>%d</h3>"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
#+REVEAL_THEME: my_simple
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programación en R 2018">
#+REVEAL_POSTAMBLE: <p> @luisgmoyano </p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+REVEAL_HLEVEL: 1

# # (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# # (setq org-reveal-title-slide 'auto)
# # see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

# #+OPTIONS: reveal_width:1200 reveal_height:800
# #+OPTIONS: toc:1
# #+REVEAL_PLUGINS: (markdown notes)
# #+REVEAL_EXTRA_CSS: ./local
# ## black, blood, league, moon, night, serif, simple, sky, solarized, source, template, white
# #+REVEAL_HEADER: <meta name="description" content="Programación en R 2017">
# #+REVEAL_FOOTER: <meta name="description" content="Programación en R 2017">


#+begin_src yaml :exports (when (eq org-export-current-backend 'md) "results") :exports (when (eq org-export-current-backend 'reveal) "none") :results value html 
--- 
layout: default 
title: Clase tidyr
--- 
#+end_src 
#+results:

# #+begin_html
# <img src="right-fail.png">
# #+end_html

# #+ATTR_REVEAL: :frag roll-in
* Repaso de la clase anterior
** Funciones ~*map*()~ de =purrr=
#+BEGIN_EXPORT html
<img style="WIDTH:800px; HEIGHT:600px; border:0" src="./figs/purrr-apply.png">
#+END_EXPORT
*** Funciones ~*map*()~ de =purrr=
Con ~purrr~, uno siempre elige explícitamente el tipo de salida.
#+BEGIN_EXPORT html
<img style="WIDTH:800px; HEIGHT:450px; border:0" src="./figs/purrr-apply-output.png">
#+END_EXPORT
** Datos anidados: ~nest()~
Ejemplo de /workflow/ en el que usamos listas anidadas y manipulamos con ~purrr~, conservando relaciones.
#+BEGIN_EXPORT html
<img style="WIDTH:1600px; HEIGHT:450px; border:0" src="./figs/purrr-nest2.png">
#+END_EXPORT
* /Tidyverse/ viene de /Tidy data/
** Qué significa tener datos prolijos?

Para tener datos prolijos se deben cumplir los siguientes tres requisitos:

    1. Cada variable debe tener su propia columna.
    2. Cada observación debe tener su propia fila.
    3. Cada valor debe tener su propia celda. 

#+BEGIN_EXPORT html
<img style="WIDTH:1300px; HEIGHT:300px; border:0" src="./figs/tidy-1.png">
#+END_EXPORT

Más sobre el abordaje tipo /tidy data/ en [[http://www.jstatsoft.org/v59/i10/paper][H. Wickham "Tidy data", J Stat Softw (2014)]] , la [[https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html][vignette]] del paquete y por que no sus excepciones en el artículo [[https://simplystatistics.org/2016/02/17/non-tidy-data/][Non-tidy data]].
** Paquete ~tidyr~
** ~gather()~
Usamos ~gather(data, key, value)~ cuando tenemos una variable distribuida en varias
columnas.

Asignamos a *key* un nombre para la variable del encabezado y a
*value* un nombre para la variable que corresponde a los valores de la
tabla.

#+BEGIN_SRC R 
  table4a
  #> # A tibble: 3 × 3
  #>       country `1999` `2000`
  #> 1 Afghanistan    745   2666
  #> 2      Brazil  37737  80488
  #> 3       China 212258 213766
  table4a %>% gather(`1999`, `2000`, key = "year", value = "cases")
  ## # A tibble: 6 x 3
  ##       country  year  cases
  ## 1 Afghanistan  1999    745
  ## 2      Brazil  1999  37737
  ## 3       China  1999 212258
  ## 4 Afghanistan  2000   2666
  ## 5      Brazil  2000  80488
  ## 6       China  2000 213766
#+END_SRC
** ~gather()~
#+BEGIN_EXPORT html
<img style="WIDTH:2600px; HEIGHT:400px; border:0" src="./figs/tidy-9.png">
#+END_EXPORT

** ~spread()~
Usamos ~spread(data, key, value)~ cuando tenemos una observación distribuida en varias filas. 

Asociamos ~key~ a la variable que contiene valores de variable y ~value~ a la variable que contiene valores de distintas variables.

#+BEGIN_SRC R 
table2
#> # A tibble: 12 × 4
#>       country  year       type     count
#> 1 Afghanistan  1999      cases       745
#> 2 Afghanistan  1999 population  19987071
#> 3 Afghanistan  2000      cases      2666
#> 4 Afghanistan  2000 population  20595360
#> 5      Brazil  1999      cases     37737
#> 6      Brazil  1999 population 172006362
#> # ... with 6 more rows
table2 %>% spread(key = type, value = count)
#> # A tibble: 6 × 4
#>       country  year  cases population
#> 1 Afghanistan  1999    745   19987071
#> 2 Afghanistan  2000   2666   20595360
#> 3      Brazil  1999  37737  172006362
#> 4      Brazil  2000  80488  174504898
#> 5       China  1999 212258 1272915272
#> 6       China  2000 213766 1280428583
#+END_SRC

** ~spread()~
#+BEGIN_EXPORT html
<img style="WIDTH:1200px; HEIGHT:500px; border:0" src="./figs/tidy-8.png">
#+END_EXPORT

** ~separate()~
Usamos ~separate(data, col, into, sep)~ cuando queremos dividir una variable en varias.

#+BEGIN_SRC R 
table3
#> # A tibble: 6 × 3
#>       country  year              rate
#> 1 Afghanistan  1999      745/19987071
#> 2 Afghanistan  2000     2666/20595360
#> 3      Brazil  1999   37737/172006362
#> 4      Brazil  2000   80488/174504898
#> 5       China  1999 212258/1272915272
#> 6       China  2000 213766/1280428583
table3 %>% separate(rate, into = c("cases", "population"), sep = "/", convert = TRUE)
#> # A tibble: 6 × 4
#>       country  year  cases population
#> 1 Afghanistan  1999    745   19987071
#> 2 Afghanistan  2000   2666   20595360
#> 3      Brazil  1999  37737  172006362
#> 4      Brazil  2000  80488  174504898
#> 5       China  1999 212258 1272915272
#> 6       China  2000 213766 1280428583
#+END_SRC
** ~separate()~
#+BEGIN_EXPORT html
<img style="WIDTH:700px; HEIGHT:500px; border:0" src="./figs/tidy-17.png">
#+END_EXPORT

** ~unite()~
Usamos ~unite(data, col, sep)~ para juntar dos columnas.

#+BEGIN_SRC R 
table5 <- table3 %>% separate(year, into = c("century", "year"), sep = 2)
#> # A tibble: 6 × 4
#>       country century  year              rate
#> 1 Afghanistan      19    99      745/19987071
#> 2 Afghanistan      20    00     2666/20595360
#> 3      Brazil      19    99   37737/172006362
#> 4      Brazil      20    00   80488/174504898
#> 5       China      19    99 212258/1272915272
#> 6       China      20    00 213766/1280428583
table5 %>% unite(new, century, year, sep = "")
#> # A tibble: 6 × 3
#>       country   new              rate
#> 1 Afghanistan  1999      745/19987071
#> 2 Afghanistan  2000     2666/20595360
#> 3      Brazil  1999   37737/172006362
#> 4      Brazil  2000   80488/174504898
#> 5       China  1999 212258/1272915272
#> 6       China  2000 213766/1280428583
#+END_SRC

** ~unite()~
#+BEGIN_EXPORT html
<img style="WIDTH:700px; HEIGHT:500px; border:0" src="./figs/tidy-18.png">
#+END_EXPORT

** COMMENT Valores ~NA~ y ~complete()~
Podemos tener valores no accesibles de dos maneras:
1. *Explícitamente* - la presencia de la ausencia (proverbio zen).
2. *Implícitamente* - la ausencia  de la presencia (otro, igual de útil).

#+BEGIN_SRC R 
stocks %>% complete(year, qtr)
#> # A tibble: 8 × 3
#>    year   qtr return
#> 1  2015     1   1.88
#> 2  2015     2   0.59
#> 3  2015     3   0.35
#> 4  2015     4     NA
#> 5  2016     1     NA
#> 6  2016     2   0.92
#> # ... with 2 more rows
#+END_SRC

** Aún más prolijidad: paquete ~broom~
Pretnede extender la metodología 'prolija' a funciones clave como ~lm~, ~glm~, ~anova~ y varias otras, transformando sus salidas en data frames consistentes con el resto del /tidyverse/.

- Siempre saca data frames
- Nunca pone nombres en las filas (los guarda en variables que empiezan con punto)
- Consistencia al nombrar variables para combinar modelos sin trabajo extra. Para mayor información que variables se guardan, consultar el final de [[https://cran.r-project.org/web/packages/broom/vignettes/broom.html][este link]].
- Tres funciones principales: ~tidy()~, ~augment()~ y ~gather()~.
*** ~tidy()~
Construye un data frame que resume los resultados de un modelo estadístico, por ejemplo, coeficientes y /p-values/ para cada regresión, etc.

#+BEGIN_SRC R 
lmfit <- lm(mpg ~ wt, mtcars)
lmfit
## 
## Call:
## lm(formula = mpg ~ wt, data = mtcars)
## 
## Coefficients:
## (Intercept)           wt  
##      37.285       -5.344
summary(lmfit)
library(broom)
tidy(lmfit)

##          term  estimate std.error statistic      p.value
## 1 (Intercept) 37.285126  1.877627 19.857575 8.241799e-19
## 2          wt -5.344472  0.559101 -9.559044 1.293959e-10
#+END_SRC

*** ~augment()~
 Agrega columnas a los datos originales modelados (descarta variables fuera del modelo). Esto incluye predicciones, residuos o asignaciones de clusters.

#+BEGIN_SRC R 
head(augment(lmfit))

##           .rownames  mpg    wt  .fitted   .se.fit     .resid       .hat
## 1         Mazda RX4 21.0 2.620 23.28261 0.6335798 -2.2826106 0.04326896
## 2     Mazda RX4 Wag 21.0 2.875 21.91977 0.5714319 -0.9197704 0.03519677
## 3        Datsun 710 22.8 2.320 24.88595 0.7359177 -2.0859521 0.05837573
## 4    Hornet 4 Drive 21.4 3.215 20.10265 0.5384424  1.2973499 0.03125017
## 5 Hornet Sportabout 18.7 3.440 18.90014 0.5526562 -0.2001440 0.03292182
## 6           Valiant 18.1 3.460 18.79325 0.5552829 -0.6932545 0.03323551
##     .sigma      .cooksd  .std.resid
## 1 3.067494 1.327407e-02 -0.76616765
## 2 3.093068 1.723963e-03 -0.30743051
## 3 3.072127 1.543937e-02 -0.70575249
## 4 3.088268 3.020558e-03  0.43275114
## 5 3.097722 7.599578e-05 -0.06681879
## 6 3.095184 9.210650e-04 -0.23148309
#+END_SRC

*** ~glance()~ 
Construye un resumen conciso del modelo, de una línea (típicamente con R2, R2 adjustado, error standard, F1, etc.)

#+BEGIN_SRC R 
glance(lmfit)

##   r.squared adj.r.squared    sigma statistic      p.value df    logLik
## 1 0.7528328     0.7445939 3.045882  91.37533 1.293959e-10  2 -80.01471
##        AIC      BIC deviance df.residual
## 1 166.0294 170.4266 278.3219          30
#+END_SRC
* Workflow científico
#+BEGIN_EXPORT html
<img style="WIDTH:700px; HEIGHT:300px; border:0" src="./figs/data-science.png">
#+END_EXPORT

** Modo interactivo, ~source()~ y ~R CMD BATCH~

#+BEGIN_SRC R 
## En un editor de texto creamos el script z.R
pdf("xh.pdf")      # configuramos un archivo de salido
hist(rnorm(100))   # generamos 100 números aleatorios de N(0,1) y hacemos un histograma
dev.off()          # cerramos el archivo de salida
#+END_SRC
#+BEGIN_SRC basic-shell
## En el terminal:
R CMD BATCH z.R
#+END_SRC
#+BEGIN_SRC R 
## En R:
source("z.R")
#+END_SRC
Acordarse que para imprimir en pantalla desde un script, tienen que usar print(). 

** /Workflow/ científico
- Trabajar con /scripts/ permite mantener y sistematizar nuestro proceso científico
  - el trabajo pasa a ser gradual, mejorando a cada vez
- Conviene modularizar nuestros procesos haciendo /scripts/ de /scripts/.
  - Nos da flexibilidad y claridad 
  - Permite separar 'físicamente' procesos computacionales diferentes
  - Permite reciclar código

Ejemplo: hago un /script/, my_great_data_analysis.R, que contiene:
#+BEGIN_SRC R 
source("0-input-data.R")
source("1-clean-data.R")
source("2-parse-data.R")
source("3-graph-data.R")
#+END_SRC
 
** R project y CRAN en ciencia
[[https://www.r-project.org/][The R Project for Statistical Computing]]

[[https://cran.r-project.org/][The Comprehensive R Archive Network]]

- El proyecto R mantiene el código, [[https://cran.r-project.org/manuals.html][la documentación]], y la comunidad, entre otras cosas
- CRAN: red de servers web y ftp mundial que guarda versiones y documentación actualizadas e
  idénticas de R. De acá se baja R y los [[https://cran.r-project.org/web/packages/available_packages_by_date.html][paquetes aceptados oficialmente]]
- CRAN tiene [[https://cran.r-project.org/web/views/][Task Views]], páginas web que nuclean paquetes por temas. [[https://www.bioconductor.org][Bioconductor]] también. Ejemplos:
  - [[https://cran.r-project.org/web/views/ChemPhys.html][CRAN Task View: Chemometrics and Computational Physics]]
  - [[https://www.bioconductor.org/packages/3.3/bioc/vignettes/ChemmineR/inst/doc/ChemmineR.html][ChemmineR: Cheminformatics Toolkit for R]]
  - [[https://asaip.psu.edu/forums/software-forum/459833927][Paquetes para astronomía en ASAIP]]
  - [[https://cran.r-project.org/web/views/Genetics.html][CRAN Task View: Statistical Genetics]]
  - y muchos otros!
* Práctica tidyr
Trabajamos con los datos ~who~ del paquete ~tidyr~. Son datos de tuberculosis (TB) de la organización mundial de la salud. Pueden leer el /help/ de los datos para tener más información. El ejercicio es llevar estos datos a formato 'prolijo' o /tidy/. Para ello deben deshacerse de datos redundantes, y utlizar las funciones de ~tidyr~ hasta quedarse con columnas correspondientes a país, año, tipo (de TB), sexo, edad y casos. Tendrán que usar lo aprendido respecto de ~NA~'s y respecto de manipulación de /strings/ (paquete ~readr~). 

#+BEGIN_SRC R 
head(who_final)
# A tibble: 76,046 x 6
   país         año     tipo   sex edad   casos
 1 Afghanistan  1997    sp     m   014     0
 2 Afghanistan  1998    sp     m   014    30
 3 Afghanistan  1999    sp     m   014     8
 4 Afghanistan  2000    sp     m   014    52
 5 Afghanistan  2001    sp     m   014   129
 6 Afghanistan  2002    sp     m   014    90
#+END_SRC
