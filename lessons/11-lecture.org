#    -*- mode: org -*-
#+TITLE: R 2017
#+DATE: 31/05/2017
#+AUTHOR: Luis G. Moyano
#+EMAIL: lgmoyano@gmail.com

#+OPTIONS: author:nil date:t email:nil
#+OPTIONS: ^:nil _:nil
#+STARTUP: showall expand
#+options: toc:nil
#+REVEAL_ROOT: ../../reveal.js/
#+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h3>%d</h3>"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
#+REVEAL_THEME: my_simple
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programación en R 2017">
#+REVEAL_POSTAMBLE: <p> @luisgmoyano </p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+REVEAL_HLEVEL: 1

# # (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# # (setq org-reveal-title-slide 'auto)
# # see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

# #+OPTIONS: reveal_width:1200 reveal_height:800
# #+OPTIONS: toc:1
# #+REVEAL_PLUGINS: (markdown notes)
# #+REVEAL_EXTRA_CSS: ./local
# ## black, blood, league, moon, night, serif, simple, sky, solarized, source, template, white
# #+REVEAL_HEADER: <meta name="description" content="Programación en R 2017">
# #+REVEAL_FOOTER: <meta name="description" content="Programación en R 2017">


#+begin_src yaml :exports (when (eq org-export-current-backend 'md) "results") :exports (when (eq org-export-current-backend 'reveal) "none") :results value html 
--- 
layout: default 
title: Clase 11
--- 
#+end_src 
#+results:

# #+begin_html
# <img src="right-fail.png">
# #+end_html

# #+ATTR_REVEAL: :frag roll-in

* Repaso de la clase anterior
** modo interactivo vs. source() y R CMD BATCH

#+BEGIN_SRC R 
##En un editor de texto creamos el script z.R
pdf("xh.pdf")  # configuramos un archivo de salido
hist(rnorm(100))  # generamos 100 números aleatorios de N(0,1) y hacemos un histograma
dev.off()  # cerramos el archivo de salida

## En el terminal:
R CMD BATCH z.R

## En R:
source("z.R")
#+END_SRC

- Acordarse que para imprimir en pantalla desde un script, tienen que usar print(). 
** Workflow científico
- trabajar con scripts permite 'mantener' nuestro proceso científico
  - el trabajo pasa a ser gradual, mejorando a cada vez
- modularizar nuestros procesos! Scripts de scripts
  - nos da flexibilidad y claridad 
  - permite separar 'físicamente' procesos computacionales diferentes
  - permite reciclar código!

Ejemplo: hago freaking_good_data_analysis.R, que contiene:
#+BEGIN_SRC R 
source("0-input-data.R")
source("1-clean-data.R")
source("2-parse-data.R")
source("3-graph-data.R")
#+END_SRC
 
** R project y CRAN
[[https://www.r-project.org/][The R Project for Statistical Computing]]

[[https://cran.r-project.org/][The Comprehensive R Archive Network]]

- El proyecto R mantiene el código, [[https://cran.r-project.org/manuals.html][la documentación]], y la comunidad, entre otras cosas
- CRAN es una red de servers web y ftp mundial que guarda versiones y documentación actualizadas e
  idénticas de R. De acá se baja R y los [[https://cran.r-project.org/web/packages/available_packages_by_date.html][paquetes aceptados oficialmente]]
- CRAN tiene [[https://cran.r-project.org/web/views/][Task Views]], páginas web que nuclean paquetes por temas

** Estadística descriptiva
Una manera de hacer estadística descriptiva es con sapply:
#+BEGIN_SRC R 
 sapply(mydata, mean, na.rm=TRUE) 
#+END_SRC
(podemos usar mean, sd, var, min, max, median, range, y quantile). O summary().

Tenemos también group_by() + summarise() con las mismas funciones básicas.
** Distribuciones
En general R usa la siguiente convención:

- dDIST(x, ...) es la función distribución de probabilidad (PDF). Devuelve la prob. de observar un
  valor x
- pDIST(x, ...) es la función cumulativa de probabilidad (CDF). Devuelve la prob. de obervar un
  valor menor a x (mayor si usamos lower.tail=F)  
- rDIST(n, ...) es un generador de números aleatorios que devuelve n valores sacados de una distr. DIST.
- qDIST(p, ...) es la función cuartil que devielve el x que corresponde al percentil p de DIST. Si
  lower.tail=F, devuelve 1 - el percentil p.

#+BEGIN_EXPORT html
<img style="WIDTH:1200px; HEIGHT:200px; border:0" src="./figs/dists.png">
#+END_EXPORT

Para ver las distribuciones disponibles, ver el [[https://cran.r-project.org/web/views/Distributions.html][task view de distribuciones]]
* Modelado estadístico 
Modelado se refiere a proponer determinadas relaciones entre variables, típicamente cuál es la
relación entre una variable dependiente o /variable respuesta/ y otras variables independientes o
/variables explicativas/. 

En R la función lm() se usa para regresión lineal (/linear models/) y glm() para /generalized linear models/.
*** Regresión lineal (lm)
Construimos un "modelo" (una relación) entre variables dependientes e independientes optimizando
parámetros para poder predecir.

1. Propongo una determinada relación de variables
2. Calculo coeficientes del modelo
3. Compruebo que tan bien se ajusta el modelo a nuevas observaciones

#+BEGIN_SRC R 
y[i] ~ f(x[i,]) = b[1] x[i,1] + ... b[n] x[i,n]
## b[i] son los coeficientes o betas
#+END_SRC

*** Ejemplo con datos de 2011 US Census PUMS

Bajar los datos de [[https://github.com/WinVector/zmPDSwR/raw/master/PUMS/psub.RData][acá]].

#+BEGIN_SRC R 
## hacemos la regresión:
load("psub.RData")
dtrain <- subset(psub, ORIGRANDGROUP >= 500)
dtest <- subset(psub, ORIGRANDGROUP < 500)
model <- lm(log(PINCP,base=10) ~ AGEP + SEX + COW + SCHL, data=dtrain) 
dtest$predLogPINCP <- predict(model,newdata=dtest) 

## resultados:
summary(model)

## graficamos:
library(ggplot2)
ggplot(data=dtest,aes(x=predLogPINCP,y=log(PINCP,base=10))) + geom_point(alpha=0.2,color="black") + 
geom_smooth(aes(x=predLogPINCP, y=log(PINCP,base=10)),color="black") +
geom_line(aes(x=log(PINCP,base=10), y=log(PINCP,base=10)),color="blue",linetype=2) +
scale_x_continuous(limits=c(4,5)) +
scale_y_continuous(limits=c(3.5,5.5))

## residuos:
ggplot(data=dtest,aes(x=predLogPINCP, y=predLogPINCP-log(PINCP,base=10))) +
geom_point(alpha=0.2,color="black") +
geom_smooth(aes(x=predLogPINCP, y=predLogPINCP-log(PINCP,base=10)), color="black")

#+END_SRC
*** Regresión lineal generalizada (glm)

Los modelos lienales asumen que el valor predicho es continuo y que los errores van a ser
"normales". Los modelos lineales generalizados relajan estas suposiciones. 

#+BEGIN_SRC R 
## expresión general
glm(formula, family=familytype(link=linkfunction), data=)
#+END_SRC

Ejemplito: Regresión logística, para variables categóricas.

#+BEGIN_SRC R 
# F es un factor binario
# x1, x2 y x3 son predictores continuos 
fit <- glm(F~x1+x2+x3,data=mydata,family=binomial())
summary(fit) # resultados
exp(coef(fit)) # coeficientes
predict(fit, type="response") # predicciones
residuals(fit, type="deviance") # residuos 

#+END_SRC
* Estadística avanzada - material infinito
- [[https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html][Paquete stats]]
- [[https://cran.r-project.org/web/views/Distributions.html][CRAN view de distribuciones]]
- [[https://www.stats.ox.ac.uk/pub/MASS4/][Modern Applied Statistics with S. Fourth Edition]] - [[https://cran.r-project.org/web/packages/MASS/index.html][(MASS book)]]
- [[http://statweb.stanford.edu/~tibs/ElemStatLearn/][The elements of statistical learning]] - [[https://cran.r-project.org/web/packages/ElemStatLearn/index.html][(ElemStatLearn book)]]
* Práctica 11
1. En los datos de diamantes, hacer una regresión lineal de la variable logaritmo del precio como
   función del logaritmo del peso (carat). Sacar los coeficientes y usarlos para graficar el modelo (con
   una línea) sobre el scatterplot (usar geom_hex() para este último). Luego graficar los residuos
   en otro gráfico. 
2. Si tengo dos vectores a y b del mismo largo, que obtengo al hacer sum(a * b)? Y sqrt(sum(a * a))?
3. En un dia de sol, hay dos mesas en un jardín inglés. En cada mesa hay algunos pájaros,
   tranquis. Uno de la primer mesa les dice a los de la segunda: "si se viene uno de uds. acá,
   entonces vamos a ser la misma cantidad en las dos mesas". "Si", le responden, "pero si se viene
   uno de uds. para acá, vamos a ser el doble acá que la de ustedes". Escriban unas ecuaciones para
   resolver en R y saber cuántos pájaros había en cada mesa. (Tomado de "Linear algebra in R", Søren Højsgaard
   15 de Febrero de 2005.)
   
