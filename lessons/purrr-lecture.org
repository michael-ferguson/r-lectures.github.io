#    -*- mode: org -*-
#+TITLE: R lectures
#+DATE: 21/05/2017
#+AUTHOR: Luis G. Moyano
#+EMAIL: lgmoyano@gmail.com

#+OPTIONS: author:nil date:t email:nil
#+OPTIONS: ^:nil _:nil
#+STARTUP: showall expand
#+options: toc:nil
#+REVEAL_ROOT: ../../reveal.js/
#+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h3>%d</h3>"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
#+REVEAL_THEME: my_simple
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programación en R 2017">
#+REVEAL_POSTAMBLE: <p> @luisgmoyano </p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+REVEAL_HLEVEL: 1

# # (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# # (setq org-reveal-title-slide 'auto)
# # see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

# #+OPTIONS: reveal_width:1200 reveal_height:800
# #+OPTIONS: toc:1
# #+REVEAL_PLUGINS: (markdown notes)
# #+REVEAL_EXTRA_CSS: ./local
# ## black, blood, league, moon, night, serif, simple, sky, solarized, source, template, white
# #+REVEAL_HEADER: <meta name="description" content="Programación en R 2017">
# #+REVEAL_FOOTER: <meta name="description" content="Programación en R 2017">


#+begin_src yaml :exports (when (eq org-export-current-backend 'md) "results") :exports (when (eq org-export-current-backend 'reveal) "none") :results value html 
--- 
layout: default 
title: Clase 12
--- 
#+end_src 
#+results:

# #+begin_html
# <img src="right-fail.png">
# #+end_html

# #+ATTR_REVEAL: :frag roll-in
* Repaso de la clase anterior
** Estadística descriptiva
Conceptos para entender la estructura de un grupo (digamos, ~N > 30~) de datos. 

Una manera de hacer estadística descriptiva en columnas de listas (o data.frames) es con ~sapply~:

#+BEGIN_SRC R 
 sapply(mydata, mean, na.rm=TRUE) 
#+END_SRC

donde podemos usar ~mean~, ~sd~, ~var~, ~min~, ~max~, ~median~, ~range~, o ~quantile~, entre otras). 

O ~summary()~, que es equivalente y funciona con data.frames.

Tenemos también ~group_by() + summarise()~ con las mismas funciones básicas.
** Distribuciones
En general R usa la siguiente convención:

- ~dDIST(x, ...)~ es la función distribución de probabilidad (PDF). Devuelve la prob. de observar un
  valor x
- ~pDIST(x, ...)~ es la función cumulativa de probabilidad (CDF). Devuelve la prob. de obervar un
  valor menor a x (mayor si usamos ~lower.tail=F~)  
- ~rDIST(n, ...)~ es un generador de números aleatorios que devuelve n valores sacados de una distr. DIST.
- ~qDIST(p, ...)~ es la función cuartil que devuelve el x que corresponde al percentil ~p~ de DIST. Si
  ~lower.tail=F~, devuelve ~1~ menos ~p~.

#+BEGIN_EXPORT html
<img style="WIDTH:1200px; HEIGHT:200px; border:0" src="./figs/dists.png">
#+END_EXPORT

Para ver las distribuciones disponibles, ver el [[https://cran.r-project.org/web/views/Distributions.html][task view de distribuciones]]
** Modelado estadístico 
Modelado se refiere a proponer determinadas relaciones entre variables, típicamente cuál es la
relación entre una variable dependiente o /variable respuesta/ y otras variables independientes o
/variables explicativas/. 

En R la función ~lm()~ se usa para regresión lineal (/linear models/) y ~glm()~ para /generalized linear models/.
*** Regresión lineal - ~lm()~
Construimos un "modelo" (una relación) entre variables dependientes e independientes optimizando
parámetros para poder predecir.

1 - Propongo una determinada relación de variables.


2 - Calculo coeficientes del modelo.


3 - Compruebo que tan bien se ajusta el modelo a nuevas observaciones.

#+BEGIN_SRC R 
y[i] ~ f(x[i,]) = b[1] x[i,1] + ... b[n] x[i,n]
## b[i] son los coeficientes o betas
#+END_SRC

*** Regresión lineal generalizada - ~glm()~

Los modelos lineales asumen que el valor predicho es continuo y que los errores van a ser
"normales". Los modelos lineales generalizados relajan estas suposiciones.

#+BEGIN_SRC R 
## expresión general
glm(formula, family=familytype(link=linkfunction), data=)
#+END_SRC

Ejemplito: Regresión logística, para variables categóricas.

#+BEGIN_SRC R 
# F es un factor binario
# x1, x2 y x3 son predictores continuos 
fit <- glm(F~x1+x2+x3,data=mydata,family=binomial())
summary(fit) # resultados
exp(coef(fit)) # coeficientes
predict(fit, type="response") # predicciones
residuals(fit, type="deviance") # residuos 

#+END_SRC
** Estadística avanzada - material infinito
- [[https://stat.ethz.ch/R-manual/R-devel/library/stats/html/00Index.html][Paquete stats]]
- [[https://cran.r-project.org/web/views/Distributions.html][CRAN view de distribuciones]]
- [[https://www.stats.ox.ac.uk/pub/MASS4/][Modern Applied Statistics with S. Fourth Edition]] - [[https://cran.r-project.org/web/packages/MASS/index.html][(MASS book)]]
- [[http://statweb.stanford.edu/~tibs/ElemStatLearn/][The elements of statistical learning]] - [[https://cran.r-project.org/web/packages/ElemStatLearn/index.html][(ElemStatLearn book)]]

* Manejando listas con ~purrr~
* Funciones ~*map*()~ de =purrr=
#+BEGIN_EXPORT html
<img style="WIDTH:800px; HEIGHT:600px; border:0" src="./figs/purrr-apply.png">
#+END_EXPORT
** ~map(.x, .f, ...)~
Como ~lapply~, aplica la función ~f~ a los elementos de la lista ~x~.
#+BEGIN_SRC R 
x1 <- list(
  c(0.27, 0.37, 0.57, 0.91, 0.20),
  c(0.90, 0.94, 0.66, 0.63, 0.06), 
  c(0.21, 0.18, 0.69, 0.38, 0.77)
)
map(x1, max)
[[1]]
[1] 0.91

[[2]]
[1] 0.94

[[3]]
[1] 0.77
#+END_SRC
** Atajos
Puedo pasar fórmulas, nombres o posiciones a ~map()~:

#+BEGIN_SRC R 
## Puedo pasar funciones:
models <- mtcars %>% 
  split(.$cyl) %>% 
  map(function(df) lm(mpg ~ wt, data = df))

## O directamente una *fórmula de un solo lado*:
models <- mtcars %>% 
  split(.$cyl) %>% 
  map(~lm(mpg ~ wt, data = .))
#+END_SRC

#+BEGIN_SRC R 
## Puedo pasar argumentos con subsetting:
models %>% 
  map(summary) %>% 
  map_dbl(~.$r.squared)

## O pasar directamente el nombre:
models %>% 
  map(summary) %>% 
  map_dbl("r.squared")
#+END_SRC
#+BEGIN_SRC R 
## Finalmente, puedo hacer pasar posiciones:
x <- list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))
x %>% map_dbl(2)
#[1] 2 5 8
#+END_SRC
** Funciones ~*map*()~ de =purrr=
Con ~purrr~, uno siempre elige explícitamente el tipo de salida.
#+BEGIN_EXPORT html
<img style="WIDTH:800px; HEIGHT:450px; border:0" src="./figs/purrr-apply-output.png">
#+END_EXPORT
*** Ejemplos de salidas de ~map()~
#+BEGIN_SRC R 
map_dbl(x1, max)
[1] 0.91 0.94 0.77
map_chr(x1, max)
[1] "0.910000" "0.940000" "0.770000"
#+END_SRC

** ~map2(.x, .y, .f, ...)~
Si tengo dos listas como input, uso ~map2~.
#+BEGIN_SRC R 
mu <- list(5, 10, -3)
sigma <- list(1, 5, 10)
map2(mu, sigma, rnorm, n = 5) %>% str()
#> List of 3
#>  $ : num [1:5] 4.78 5.59 4.93 4.3 4.47
#>  $ : num [1:5] 10.85 10.57 6.02 8.82 15.93
#>  $ : num [1:5] -1.12 7.39 -7.5 -10.09 -2.7
#+END_SRC
#+BEGIN_EXPORT html
<img style="WIDTH:450px; HEIGHT:200px; border:0" src="./figs/lists-map2.png">
#+END_EXPORT
** ~pmap(.l, .f, ...)~
Para más argumentos que dos, tenemos ~pmap()~.
#+BEGIN_SRC R 
n <- list(1, 3, 5)
mu <- list(5, 10, -3)
sigma <- list(1, 5, 10)

args1 <- list(n, mu, sigma)
args1 %>%
  pmap(rnorm) %>% 
  str()
#> List of 3
#>  $ : num 4.55
#>  $ : num [1:3] 13.4 18.8 13.2
#>  $ : num [1:5] 0.685 10.801 -11.671 21.363 -2.562

#+END_SRC

#+BEGIN_EXPORT html
<img style="WIDTH:450px; HEIGHT:200px; border:0" src="./figs/lists-pmap-named.png">
#+END_EXPORT
** Varias funciones: ~invoke_map(.f, .x, ...)~ 
#+BEGIN_SRC R 
f <- c("runif", "rnorm", "rpois")
param <- list(
  list(min = -1, max = 1), 
  list(sd = 5), 
  list(lambda = 10)
)
invoke_map(f, param, n = 5) %>% str()
#> List of 3
#>  $ : num [1:5] 0.762 0.36 -0.714 0.531 0.254
#>  $ : num [1:5] 3.07 -3.09 1.1 5.64 9.07
#>  $ : int [1:5] 9 14 8 9 7
#+END_SRC
#+BEGIN_EXPORT html
<img style="WIDTH:450px; HEIGHT:200px; border:0" src="./figs/lists-invoke.png">
#+END_EXPORT
* ~walk()~, ~walk2()~ y ~pwalk()~
Uso estas funciones cuando no me importa el valor de retorno, si no un efecto secundario como una información en pantalla o un archivo que se guarda. Estas funciones devuelven (invisiblemente) el mismo objeto que reciben, por lo que es posible usarlas en medio de un /pipe/.

#+BEGIN_SRC R 
library(ggplot2)
plots <- mtcars %>% 
  split(.$cyl) %>% 
  map(~ggplot(., aes(mpg, wt)) + geom_point())

## usamos str_c para agregar extensión
paths <- stringr::str_c(names(plots), ".pdf")

## ejecuto ggsave(filename, plot) simultáneamente
pwalk(list(paths, plots), ggsave, path = tempdir())
#+END_SRC
* Filtros
Tenemos un número de funciones para filtrar listas, de acuerdo a /predicados/ ~.p~.
#+BEGIN_EXPORT html
<img style="WIDTH:400px; HEIGHT:450px; border:0" src="./figs/purrr-filter.png">
#+END_EXPORT
* Resúmenes
Del mismo modo, tenemos algunas funciones para seleccionar subconjuntos de elementosm de acuerdo a criterios.
#+BEGIN_EXPORT html
<img style="WIDTH:400px; HEIGHT:450px; border:0" src="./figs/purrr-summarise.png">
#+END_EXPORT
* Trasformaciones
Finalmente, podemos modificar subconjuntos de elementos de acuerdo a criterios (posición, etc.).
#+BEGIN_EXPORT html
<img style="WIDTH:500px; HEIGHT:500px; border:0" src="./figs/purrr-transform.png">
#+END_EXPORT
* Datos anidados: ~nest()~
A veces es útil tener listas rectangulares donde el contenido de las celdas son a su vez listas. 
#+BEGIN_EXPORT html
<img style="WIDTH:500px; HEIGHT:500px; border:0" src="./figs/purrr-nest.png">
#+END_EXPORT
* Datos anidados: ~nest()~
Ejemplo de /workflow/ en el que usamos listas anidadas y manipulamos con ~purrr~, conservando relaciones.
#+BEGIN_EXPORT html
<img style="WIDTH:1600px; HEIGHT:450px; border:0" src="./figs/purrr-nest2.png">
#+END_EXPORT
* COMMENT safely(), possibly() & quietly()
* Práctica ~purrr~
1. Usar las funciones ~map()~ para:
 - Calcular la media de cada columna de ~mtcars~.
 - Determinar el tipo de cada columna de ~nycflights13::flights~.
 - Calcular la cantidad de valores únicos de cada columna de ~iris~.
 - Generar 10 números aleatorios para  mu=−10, 0, 10, y 100.
2. Con los datos de ~airqualilty~, para cada mes, hacer una regresión
   lineal del ozono como variable respuesta y temperatura como
   variable explicativa. Del resultado, extraer un vector de /doubles/
   que contenga el elemento 'adj.r.squared' del modelo
   resultante. Preferentemente, escribir todo el procesado en una
   línea utilizando /pipes/ y ~purrr~.
