#    -*- mode: org -*-
#+TITLE: R 2019
#+DATE: 25/03/2019
#+AUTHOR: Luis G. Moyano
#+EMAIL: lgmoyano@gmail.com

#+OPTIONS: author:nil date:t email:nil
#+STARTUP: showall expand
#+options: toc:nil
#+REVEAL_ROOT: ../../reveal.js/
#+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:nil reveal_control:t
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_title_slide:"<h1>%t</h1><h3>%d</h3>"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: slide
#+REVEAL_SPEED: fast
#+REVEAL_THEME: my_moon
#+REVEAL_HEAD_PREAMBLE: <meta name="description" content="Programación en R 2019">
#+REVEAL_POSTAMBLE: <p> @luisgmoyano </p>
#+REVEAL_PLUGINS: (highlight)
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/zenburn.css
#+REVEAL_HLEVEL: 10

# # (setq org-reveal-title-slide "<h1>%t</h1><br/><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")
# # (setq org-reveal-title-slide 'auto)
# # see https://github.com/yjwen/org-reveal/commit/84a445ce48e996182fde6909558824e154b76985

# #+OPTIONS: reveal_width:1200 reveal_height:800
# #+OPTIONS: toc:1
# #+REVEAL_PLUGINS: (markdown notes)
# #+REVEAL_EXTRA_CSS: ./local
# ## black, blood, league, moon, night, serif, simple, sky, solarized, source, template, white
# #+REVEAL_HEADER: <meta name="description" content="Programación en R 2019">
# #+REVEAL_FOOTER: <meta name="description" content="Programación en R 2019">


#+begin_src yaml :exports (when (eq org-export-current-backend 'md) "results") :exports (when (eq org-export-current-backend 'reveal) "none") :results value html 
--- 
layout: default 
title: Clase 2
--- 
#+end_src 
#+results:

# #+begin_html
# <img src="right-fail.png">
# #+end_html

# #+ATTR_REVEAL: :frag roll-in
* 1er Parcial

- 8 de abril
- es sin nota
- es obligatorio
- los que puedan, traigan sus laptops (con carga)
* [[https://www.meetup.com/es/rladies-mendoza/events/][Taller R-Ladies en Mendoza: ciencia de datos con R tidyverse]]
[[https://rladies.org/][R-Ladies]] es una organización mundial para promover la diversidad de género en la comunidad R.
#+BEGIN_EXPORT html
<img style="position:absolute; TOP:260px; LEFT:200px; WIDTH:550px; HEIGHT:680px; border:0" src="./figs/rladies.png">
#+END_EXPORT

* Repaso de la clase pasada

** 
~ggplot2~

  #+BEGIN_SRC R 
  p <- ggplot(mtcars)   # creo un objeto ggplot con los datos mtcars
  p <- ggplot(mtcars) + aes(mpg, wt) # le agrego el mapeo de variables que quiero
  p <- ggplot(mtcars) + aes(mpg, wt) + geom_point() # le agrego como quiero que represente ese mapeo
  p                     # imprimo la figura
  #+END_SRC

  #+BEGIN_SRC R 
  ggplot(data = mi-data-frame) + 
        geom_point/line/etc(mapping = aes(col1, col2, colour="blue", etc.))
  #+END_SRC

_solo_ ~data.frames~

** 
#+BEGIN_EXPORT html
 <ul class="smallfont">
<li><b>data</b>: el dataframe que contiene los datos a graficar</li>
<li><b>geoms</b>: el tipo de objeto geométrico que representa los datos: puntos, líneas, polígonos, etc.</li>
<li><b>aesthetics</b>: describe las características visuales que representan los datos,  por ejemplo, posición, tamaño, color, forma, etc </li>
<li><b>scale</b>: para cada aesthetic, describe como se mapea la característica visual a valores
 por ejemplo, escala logarítmica, escala de color, de tamaño, de forma, etc.</li>
<li><b>stats</b>: describe transformaciones estadísticas que resumen los datos, e.g. una regresión  </li>
<li><b>facets</b>: permite separar en gráficos distintos de acuerdo a variables categóricas</li>
 </ul>
#+END_EXPORT

** COMMENT Práctica 1
:PROPERTIES:
:reveal_background: #123456
:END:

1. Elegir un conjunto de datos /built-in/ con datos continuos y categóricos
2. Explorar sus principales características (media, máxmimo, mínimo, etc)
3. Graficar las relaciones más importantes
4. Encontrar la manera de hacer /scatterplots/ e histogramas
5. Agregar información (título, ejes, descripción de los datos) 

** COMMENT Práctica 2
:PROPERTIES:
:reveal_background: #123456
:END:

- Seleccionen de ~data()~ un data.frame con alguna variable categórica
- Qué pasa si hacen solo ~ggplot(mi_data)~?
- Qué pasa si intentan mapear color, tamaño o forma a una variable continua?
- Para que sirve ~jitter~? Para que sirve ~stroke~?
- Podemos usar formas condicionales (>, <, etc) en aes()?
- Cómo difieren ~facet_grid~ y ~facet_wrap~?
- Usar ~box-plot~ y ~geom_smooth()~. Cuándo conviene usarlas?

* Manipulación de datos: paquete ~dplyr~

Al igual que ~ggplot2~, ~dplyr~ solo acepta /data.frames/.


> ~install.packages("dplyr")~

> ~library(dplyr)~


** principales funciones de ~dplyr~
    - ~select()~: selecciona columnas
    - ~arrange()~: reordena filas
    - ~filter()~: filtra observaciones, condicionalmente
    - ~mutate()~: crea variables a partir de otras
    - ~summarise()~: reduce varios valores a uno solo
         (generalmente agrupamos primero con ~group_by~)
** 
~select()~

Con ~select~ podemos elegir las columnas
#+BEGIN_SRC R 
install.packages("mosaicData") # instalo el paquete que tiene los datos
library(mosaicData) # cargo el paquete en la sesión, que me da acceso a los datos
b <- as.data.frame(Birthdays) # cambio el nombre y lo convierto a data.frame
str(b)  # que pinta tiene el data.frame?

# quiero un df con dos de las columnas
select(b, state, births) 

# o tres
select(b, state, births, year) 

# podemos además sacar columnas
select(b, -wday, -date) 

# si quisieran guardar el resultado para usarlo después
nombre_inventado_por_uds <- select(b, -wday, -date) 
#+END_SRC
** 
~arrange()~

Con ~arrange~ podemos ordenar según valores de columnas

#+BEGIN_SRC R 
b # el df está ordenado por año

# ahora, además, ordeno por estados
arrange(b, state) 

# ahora, por estados y por nacimientos
arrange(b, state, births)

# idem pero nacimientos, pero de mayor a menor
arrange(b, state, desc(births))
#+END_SRC

** 
~mutate()~

#+ATTR_REVEAL: frag: highlight-red
Con ~mutate~ podemos armarnos una nueva columna a partir de otra(s)

#+BEGIN_SRC R 
mutate(b, normalized = births/mean(births)) # normalizando


#+END_SRC

** 
~filter()~

Con ~filter~ podemos filtrar observaciones mediante condiciones lógicas
(>, >=, <, <=, !=, ==, más los operadores & y |)

#+BEGIN_SRC R 

# devuelve solo estado de Washington
filter(b, state == "WA") 

# Washington en 1974
filter(b, state == "WA"  & year == 1974) 

# idem, pero más de 180 nacimientos 
filter(b, state == "WA" & year == 1974 & births > 180) 
       
#+END_SRC
** 
~summarise()~ y ~group_by~

Con ~summarise~ podemos resumir variables, usualmente agrupando. 

#+BEGIN_SRC R 
# gran-promedio-gran
summarise(b, promedio = mean(births) ) 

# pero es muy eficiente para manipular datos agrupados
# por ejemplo, agrupo por mes
por_mes <- group_by(b, month)
summarise(por_mes, births_por_mes = mean(births))

# ahora agrupo por estado
por_estado <- group_by(b, state)
summarise(por_estado, births_por_estado = mean(births))
#+END_SRC
** COMMENT
#+BEGIN_SRC R 
# me armo un df agrupado como yo quiero
por_anyo <- group_by(b, year) 
# le calculo el promedio a través de los años
promedio_por_anyo <-  
                  summarise( por_anyo, promedio = mean(births) )
# calculo el promedio anual total
promedio_tot <- mean(promedio_por_anyo$promedio)
# calculo el promedio _normalizado_ a través de los años
mutate(promedio_por_anyo, 
       births_normalizado = promedio/promedio_tot)
#+END_SRC
** práctica 3
:PROPERTIES:
:reveal_background: #123456
:END:

Descargar [[https://r-lectures.github.io/assets/R2019-practice-3-v977g624ly.pdf][práctica 3]].

